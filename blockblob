import numpy as np
import os
from cryptography.fernet import Fernet
import json
import hashlib

# Étape 1 : Créer un bloc de dimension 1000x1000x1000
dimension = 1000
block = np.ones((dimension, dimension, dimension), dtype=np.uint8)

# Calculer le nombre d'octets pour le bloc initial
initial_size = block.nbytes

# Étape 2 : Enlever de la masse pour créer une étoile pentagramme
def create_pentagram(block):
    # Exemple simplifié, il faudrait un algorithme plus complexe pour un vrai pentagramme 3D
    center = dimension // 2
    radius = dimension // 4
    for x in range(dimension):
        for y in range(dimension):
            for z in range(dimension):
                if (x - center) ** 2 + (y - center) ** 2 + (z - center) ** 2 < radius ** 2:
                    block[x, y, z] = 0
    return block

block = create_pentagram(block)
final_size = block.nbytes

# Étape 3 : Sécuriser le dossier avec un deuxième cryptage
def encrypt_directory(directory, key):
    fernet = Fernet(key)
    for root, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            with open(file_path, 'rb') as f:
                data = f.read()
            encrypted_data = fernet.encrypt(data)
            with open(file_path, 'wb') as f:
                f.write(encrypted_data)

# Générer une clé pour le cryptage
key = Fernet.generate_key()
encrypt_directory('/path/to/map/directory', key)

# Étape 4 : Créer une blockchain simple
class Block:
    def __init__(self, index, previous_hash, transactions):
        self.index = index
        self.previous_hash = previous_hash
        self.transactions = transactions
        self.hash = self.calculate_hash()
    
    def calculate_hash(self):
        block_string = json.dumps(self.__dict__, sort_keys=True).encode()
        return hashlib.sha256(block_string).hexdigest()

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]
    
    def create_genesis_block(self):
        return Block(0, "0", [])
    
    def get_latest_block(self):
        return self.chain[-1]
    
    def add_block(self, new_block):
        new_block.previous_hash = self.get_latest_block().hash
        new_block.hash = new_block.calculate_hash()
        self.chain.append(new_block)

# Création et sécurisation de la blockchain
blockchain = Blockchain()
blockchain.add_block(Block(1, blockchain.get_latest_block().hash, ["Transaction 1"]))
blockchain.add_block(Block(2, blockchain.get_latest_block().hash, ["Transaction 2"]))

# Simuler un portefeuille crypto changeant
crypto_wallet = {"balance": 0}

def change_crypto_balance(amount):
    crypto_wallet["balance"] += amount

change_crypto_balance(100)
change_crypto_balance(-50)

# Afficher les résultats
print(f"Initial block size (bytes): {initial_size}")
print(f"Final block size (bytes): {final_size}")
print(f"Blockchain length: {len(blockchain.chain)}")
print(f"Crypto wallet balance: {crypto_wallet['balance']}")
